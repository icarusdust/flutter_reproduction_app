# scripts:
#   - &codesign #Reuse codesigning script
#     name: Set up keychain to be used for code signing using Codemagic CLI 'keychain' command
#     script: keychain initialize
#     name: Fetch signing files
#     script: |
#       # You can allow creating resources if existing are not found with `--create` flag
#       app-store-connect fetch-signing-files "com.onsitemanagementapp.oma" \
#         --type IOS_APP_STORE \
#         --create
#   - name: Set up signing certificate
#     script: keychain add-certificates
#   - name: Set up code signing settings on Xcode project
#     script: xcode-project use-profiles
# #       name: Get Flutter packages
# #       script: cd . && flutter packages pub get         
# #       name: Install pods
# #       script: find . -name "Podfile" -execdir pod install \;
# #       name: Flutter build ipa and automatic versioning
# #       script: |
# #           flutter build ipa --release \
# #           --build-name=6.0.0 \
# #           --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_ID") + 1)) \
# #           --export-options-plist=/Users/builder/export_options.plist

# definitions:
#   environment:
#     browserstack_ios_deployment: &browserstack_ios_deployment
#       groups: browserstack_creds



definitions:
  cool_vars: &cool_vars
    meow: 'testing'
  instance_mac_pro: &instance_mac_pro
    instance_type: mac_mini_m1
    max_build_duration: 120
  env_versions: &env_versions
    flutter: stable
    xcode: latest
    cocoapods: default
  triggering:
    events:
      - tag
    tag_patterns:
      - pattern: 'v1.2'
  environment:
    automatic_ios_signing: &automatic_ios_signing
      groups:
        - appstore_credentials
        - ios
      vars:
        BUNDLE_ID: "com.example.kobitionIntegration"
        XCODE_WORKSPACE: "App.xcworspace"
        XCODE_SCHEME: "App"
        XCODE_CONFIG: "Release-dev"
#     browserstack_upload: &browserstack_upload
#       groups:
#          - appstore_credentials
#       vars:
#         TEST: '123'

workflows:
  ios-workflow:
    name: iOS Workflow
    <<: *instance_mac_pro
    environment:
        <<: *env_versions
        <<: *automatic_ios_signing
#         vars:
#            <<: *cool_vars
      
#     instance_type: mac_pro
#     max_build_duration: 120
#     environment:
#       groups:
#         - appstore_credentials
#       vars:
#         XCODE_WORKSPACE: "Runner.xcworkspace"
#         XCODE_SCHEME: "Runner"                
#         BUNDLE_ID: "com.example.kobitionIntegration"
#         APP_STORE_ID: 1625065284

# #         APPPATH: "build/ios/ipa/kobition_integration.ipa"
# #         APP_KEY: "123"

#       flutter: stable
#       xcode: edge
#       cocoapods: default
    scripts:
#       - name: Firebase
#         script: |
#           flutter pub add firebase_core
#           flutter pub add firebase_messaging

    
      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: |
          keychain initialize
          /usr/local/bin/docker --version
          echo $CREDS
          echo $Test
      - name: Fetch signing files
        script: |
          app-store-connect fetch-signing-files $BUNDLE_ID --type IOS_APP_ADHOC --create
      - name: Use system default keychain
        script: |
          keychain add-certificates
#       - *codesign
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles
      - name: Get Flutter packages
        script: |
          cd . && flutter packages pub get         
      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;
     
          
      - name: Flutter Integration Tests iOS
        script: |
          flutter emulators --launch apple_ios_simulator
          flutter test integration_test
#         test_report: test-results-ios/flutter.json
#         ignore_failure: true
      - name: Flutter build ipa and automatic versioning
        script: |
          flutter build ipa --release \
          --build-name=6.0.0 \
          --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_ID") + 1)) \
          --export-options-plist=/Users/builder/export_options.plist
      - name: BrowserStack upload
        script: |      
              curl -u "$CREDS" -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@build/ios/ipa/kobition_integration.ipa"
              echo $TEST

#       - name: Pcloudy
#         script: |
#           curl -X POST -F "file=@/build/ios/ipa/kobition_integration.ipa" -F "source_type=raw" -F "token=93zqy94twt7325vhkg49cbkf" -F "filter=all" https://device.pcloudy.com/api/upload_file

#       - name: Kobiton integration
#         script: |       
#          APP_URL=$(curl -X POST https://api.kobiton.com/v1/apps/uploadUrl \
#           -H 'Authorization: Basic bmloYWxuZXZlcmNvZGU6YzBlYjVhYjQtM2YzZi00M2MwLTkzMjUtMWVhNDczMzQ5Y2E4' \
#           -H 'Content-Type: application/json' \
#           -H 'Accept: application/json' \
#           -d "{\"filename\": \"kobition_integration.ipa\"}" | jq -r '.url')
          
#          APP_PATH=$(curl -X POST https://api.kobiton.com/v1/apps/uploadUrl \
#           -H 'Authorization: Basic bmloYWxuZXZlcmNvZGU6YzBlYjVhYjQtM2YzZi00M2MwLTkzMjUtMWVhNDczMzQ5Y2E4' \
#           -H 'Content-Type: application/json' \
#           -H 'Accept: application/json' \
#           -d "{\"filename\": \"kobition_integration.ipa\"}" | jq -r '.appPath')
          
#          curl -T "${APPPATH}" \
#           -H 'content-type: application/octet-stream' \
#           -H 'x-amz-tagging: unsaved=true' \
#           -X PUT "${APP_URL}"
          
#          curl -X POST https://api.kobiton.com/v1/apps \
#           -H 'Authorization: Basic bmloYWxuZXZlcmNvZGU6YzBlYjVhYjQtM2YzZi00M2MwLTkzMjUtMWVhNDczMzQ5Y2E4' \
#           -H 'content-type: application/json' \
#           -d "{\"filename\": \"kobition_integration.ipa\", \"appPath\": \"${APP_PATH}\"}"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
# #     publishing:
#       app_store_connect:
#         api_key: $APP_STORE_CONNECT_PRIVATE_KEY         
#         key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       
#         issuer_id: $APP_STORE_CONNECT_ISSUER_ID         
#         submit_to_app_store: true 
#         release_type: AFTER_APPROVAL






# workflows:
#   android-workflow:
#     name: Android Workflow
#     max_build_duration: 120
#     instance_type: mac_mini
#     environment:
#       groups:
#         - keystore_credentials
#       flutter: 2.8.1
#       xcode: latest
#       cocoapods: default
#     scripts:
#       - name: Set up key properties
#         script: |
#           echo $ANDROID_FIREBASE_SECRET > $FCI_BUILD_DIR/android/app/google-services.json
#           echo $FCI_KEYSTORE | base64 --decode > /tmp/keystore.keystore
#           # The following script creates key.properties file and stores the credentials in it. As we configure code signing in app/build.gradle file, the following part is unnecessary unless code signing is configured differently as explained in the documentation: https://docs.codemagic.io/flutter-code-signing/android-code-signing/
#           cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
#           storePassword=$FCI_KEYSTORE_PASSWORD
#           keyPassword=$FCI_KEY_PASSWORD
#           keyAlias=$FCI_KEY_ALIAS
#           storeFile=/tmp/keystore.keystore
#           EOF
#       - name: Set up local.properties
#         script: |
#           echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
#       - name: Get Flutter packages
#         script: |
#           cd . && flutter packages pub get
#       - name: Flutter Integration Tests iOS
#         script: |
#           mkdir -p test-results-ios
#           flutter devices
#           xcrun simctl list
#           flutter emulators --launch apple_ios_simulator
#           flutter -d iPad-Pro test --machine > test-results-ios/flutter.json integration_test
#           flutter -d 99B14BF4-7966-4427-ACD1-34BFE4D26A01 test --machine > test-results-ios/flutter.json integration_test
#           flutter devices
#         test_report: test-results-ios/flutter.json
#         ignore_failure: true
  
#     artifacts:
#       - build/**/outputs/**/*.apk
#       - build/**/outputs/**/mapping.txt
#       - flutter_drive.log
#       - test-results-ios/*.json

